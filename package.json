{
  "name": "melon-solid",
  "version": "0.0.7",
  "description": "Melon.js game engine bindings for Solid",
  "main": "./index.js",
  "info": "# Melon Solid\\nThis project fuses the awesome frameworks \\n[Melon.js](https://www.melonjs.org) (for game development) and \\n[Solid.js](https://www.solidjs.com/) (for making websites). By combining \\nthem together you can get the convience of HTML syntax for super easy \\ndevelopment\\nWhen using plain Melon.js we write our games like this (from the platformer \\nexample):\\n```jsx\\nfunction onload() {\\n    if (!me.video.init(800, 600, {\\n        parent: 'screen',\\n      scaleMethod: 'flex-width',\\n      renderer: me.video.AUTO,\\n      preferWebGL1: false,\\n      subPixel: false\\n    })) {\\n        alert('Your browser does not support HTML5 canvas.')\\n        return\\n    }\\n    \\n    me.audio.init('mp3,ogg')\\n    me.loader.preload(resources, () => {\\n        me.state.set(me.state.PLAY, new PlayScreen())\\n        me.state.transition('fade', '#FFFFFF', 250)\\n        me.pool.register('mainPlayer', PlayerEntity)\\n        me.pool.register('SlimeEntity', SlimeEnemyEntity)\\n        me.pool.register('FlyEntity', FlyEnemyEntity)\\n        me.pool.register('CoinEntity', CoinEntity, true)\\n    }\\n    me.state.change(me.state.PLAY)\\n}\\n```\\nNow making games is as easy as writing HTML:\\n```jsx\\nfunction App(){\\n    <Melon audio>\\n        <Preloader callback={()=>{\\n            me.state.transition('fade', '#FFFFFF', 250)\\n            game.texture = new \\n            me.TextureAtlas(me.loader.getJSON('texture'), \\n            me.loader.getImage('texture'))\\n        }} resources={resources} autoPlay>\\n            <Stage state={me.state.PLAY} stage={new PlayScreen()}/>\\n            <Entity name=\"FlyEntity\" class={FlyEnemyEntity}/>\\n            <Entity name=\"SlimeEntity\" class={SlimeEnemyEntity}/>\\n            <Entity name=\"CoinEntity\" class={CoinEntity}/>\\n            <Entity name=\"mainPlayer\" class={PlayerEntity}/>\\n        </Preloader>\\n    </Melon>\\n}\\n```\\nPlus, if we want to add some HTML to serve as our GUI, we can simple put it \\ndirectly inside our Melon game!\\n## Examples\\nTry out the platformer demo for yourself here!\\n[https://codesandbox.io/s/melon-solid-platformer-demo-ys14wl](https://codes\\nandbox.io/s/melon-solid-platformer-demo-ys14wl)\\nI've also implemented the Whack-a-Mole and Platformer games (taken from \\nMelon.js) in the examples folder\\n## More on why is Melon Solid useful\\nFeel free to read my writeup \\n[here](https://melonjs.discourse.group/t/melon-solid-a-jsx-approach-for-mel\\non-js/14)\\n## TODO:\\n### Documentation\\nThere's currently no documentation yet, sorry. I have implemented tests \\nthough so it is working, and if you want to see how to use it try looking \\nin the examples directory.\\n### Multiple Games/Games Unloading Properly\\nMelon.js Currently breaks when you try to have multiple games at once, or \\nif you load a game, unload it, and reload it again. This is a limitation \\nwithin Melon.js that will hopefully be removed soon.",
  "contributors": [{
    {
      "name": "Lilith",
      "email": "redacted@redacted.redacted",
      "url": "https://www.github.com/L1lith",
      "discord_username_and_id_hash_md5": "0cf31163e2413bc69f8a16dc7595246d"
    }
  }],
  "scripts": {
    "prepub": "npm run build & npm run test & copy package.json dist & copy LICENSE.md dist & copy README.md dist",
    "pub": "cd dist & npm publish",
    "postpub": "cd dist & del package.json",
    "test": "jest",
    "pretty": "prettier --write \"src/**/*.js\"",
    "build": "rm -rf dist && mkdir dist && cross-env NODE_ENV=production babel src -d dist",
    "dev": "rm -rf dist && mkdir dist && babel src -d dist --watch"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/L1lith/Melon-Solid.git"
  },
  "keywords": ["solidhack", "melonjs", "melon", "game", "framework", "solidjs", "best_ecosystem"],
  "author": "L1lith",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/L1lith/Melon-Solid/issues"
  },
  "homepage": "https://github.com/L1lith/Melon-Solid#readme",
  "dependencies": {
    "melonjs": "^10.5.2"
  },
  "devDependencies": {
    "@babel/cli": "^7.17.6",
    "@babel/core": "^7.17.8",
    "@babel/plugin-proposal-object-rest-spread": "^7.17.3",
    "@babel/plugin-transform-runtime": "^7.17.0",
    "@babel/preset-env": "^7.16.11",
    "babel-cli": "^6.26.0",
    "babel-preset-solid": "^1.3.13",
    "cross-env": "^7.0.3",
    "jest": "^27.5.1",
    "jest-image-snapshot": "^4.5.1",
    "puppeteer": "^13.5.2",
    "sandhands": "^1.8.9",
    "solid-jest": "^0.2.0",
    "solid-testing-library": "^0.3.0",
    "tree-kill": "^1.2.2"
  }
}
